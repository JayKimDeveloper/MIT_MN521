# ===================================================================
# Scenario 1: Customer Expansion Playbook - Manual Access Switch Setup Version
# Filename: scenario1-customer-expansion.yml
# 
# Purpose: Expand an existing customer's network environment to support additional services or events
# Reusability: Can be reused for various customers and VLANs
# Constraints: Access switches require manual configuration due to vIOS L2 SSH limitations
# ===================================================================
---
- name: "Scenario 1: Customer Expansion - Initialization and Variable Check"
  hosts: localhost
  gather_facts: false
  vars:
    # Default settings (can be overridden by vars file or extra-vars)
    expansion:
      customer_id: "A"                      # Customer ID to expand
      customer_name: "Customer A"           # Customer name (for logs)
      new_vlan_id: 105                      # VLAN ID to add
      new_network: "10.100.50.0/24"         # New network range
      new_gateway: "10.100.50.1"            # New gateway IP
      description: "Event Pool Service"     # Service description
      target_dist: "dist1-sw"               # Target Distribution switch
      target_access: "access-sw4"           # Target Access switch (manual config)
      core_next_hop: "10.0.1.2"             # Next hop used by Core
      dist_interface: "GigabitEthernet2/0"  # Distribution switch interface

    # Logging and validation
    log_prefix: "[EXPANSION]"
    
  tasks:
    - name: "📋 Scenario 1 Start - {{ expansion.customer_name }} Expansion"
      debug:
        msg: |
          ================================================
          🚀 Scenario 1: {{ expansion.customer_name }} Network Expansion
          ================================================
          Expansion Info:
          - Customer ID: {{ expansion.customer_id }}
          - New VLAN: {{ expansion.new_vlan_id }}
          - Network Range: {{ expansion.new_network }}
          - Gateway: {{ expansion.new_gateway }}
          - Service Description: {{ expansion.description }}
          - Target Devices: {{ expansion.target_dist }} → {{ expansion.target_access }} (manual)
          ================================================
          ⚠️  Note: Access switches require manual configuration due to vIOS L2 limitations.
          ================================================

    - name: "Validate Variables"
      assert:
        that:
          - expansion.customer_id is defined
          - expansion.new_vlan_id is defined
          - expansion.new_network is defined
          - expansion.new_gateway is defined
          - expansion.target_dist is defined
        fail_msg: "Required variables are missing. Please also check your inventory file (-i)."
        success_msg: "{{ log_prefix }} Variable validation complete"
        
    - name: "Check Inventory Groups"
      debug:
        msg: |
          Inventory Status:
          - Distribution Group: {{ groups['distribution'] if 'distribution' in groups else 'Missing (inventory file required)' }}
          - Core Group: {{ groups['core'] if 'core' in groups else 'Missing (inventory file required)' }}
          
    - name: "Validate Inventory"
      assert:
        that:
          - "'distribution' in groups"
          - "'core' in groups"
          - "expansion.target_dist in groups['distribution']"
        fail_msg: |
          Inventory configuration is required. Run as follows:
          ansible-playbook scenario1-customer-expansion.yml -i inventory/hosts.ini -e @vars/scenario1_customer_a_expansion.yml
        success_msg: "{{ log_prefix }} Inventory validation complete"

- name: "Core Router - Add Routing for {{ expansion.customer_name }} Expansion"
  hosts: core
  gather_facts: false
  vars:
    expansion: "{{ hostvars['localhost']['expansion'] }}"
    log_prefix: "{{ hostvars['localhost']['log_prefix'] }}"
    
  tasks:
    - name: "{{ log_prefix }} Check Current Routing Table on Core Router"
      ios_command:
        commands:
          - "show ip route | include {{ expansion.new_network.split('/')[0].split('.')[0:3] | join('.') }}"
      register: current_routes
      ignore_errors: true
      
    - name: "{{ log_prefix }} Check for Existing Routes"
      debug:
        msg: |
          Existing Routes:
          {{ current_routes.stdout[0] if current_routes is succeeded and current_routes.stdout[0] is defined else 'No related routes found (unable to verify)' }}
          
    - name: "{{ log_prefix }} Add Route for {{ expansion.customer_name }} Expansion Network"
      ios_config:
        lines:
          - "ip route {{ expansion.new_network }} {{ expansion.new_netmask }} {{ expansion.core_next_hop }}"
        save_when: modified
      register: core_route_result
      vars:
        ansible_command_timeout: 60
      
    - name: "{{ log_prefix }} Verify New Route on Core Router"
      ios_command:
        commands:
          - "show ip route {{ expansion.new_network }}"
      register: new_route_verify
      
    - name: "{{ log_prefix }} Core Router Configuration Result"
      debug:
        msg: |
          ✅ Core Router Routing Config Complete
          - Network: {{ expansion.new_network }}
          - Next Hop: {{ expansion.core_next_hop }}
          - Routing Status: {{ new_route_verify.stdout[0] }}

- name: "Distribution Switch - Create VLAN Subinterface for {{ expansion.customer_name }} Expansion"
  hosts: distribution
  gather_facts: false
  vars:
    expansion: "{{ hostvars['localhost']['expansion'] }}"
    log_prefix: "{{ hostvars['localhost']['log_prefix'] }}"
    
  tasks:
    - name: "{{ log_prefix }} Check Current Interfaces on {{ expansion.target_dist }}"
      ios_command:
        commands:
          - "show ip interface brief | include {{ expansion.dist_interface }}"
      register: current_interfaces
      when: inventory_hostname == expansion.target_dist
      
    - name: "{{ log_prefix }} Check for Existing Subinterface"
      ios_command:
        commands:
          - "show interface {{ expansion.dist_interface }}.{{ expansion.new_vlan_id }}"
      register: existing_subint
      ignore_errors: true
      when: inventory_hostname == expansion.target_dist
      
    - name: "{{ log_prefix }} Duplicate Check Result"
      debug:
        msg: |
          Subinterface Duplication Check:
          {{ 'VLAN ' + expansion.new_vlan_id|string + ' already exists' if existing_subint.stdout[0] is defined and 'line protocol' in existing_subint.stdout[0] else 'VLAN ' + expansion.new_vlan_id|string + ' is available' }}
      when: inventory_hostname == expansion.target_dist
      
    - name: "{{ log_prefix }} Create VLAN Subinterface for {{ expansion.customer_name }} Expansion"
      ios_config:
        lines:
          - "interface {{ expansion.dist_interface }}.{{ expansion.new_vlan_id }}"
          - "encapsulation dot1Q {{ expansion.new_vlan_id }}"
          - "ip address {{ expansion.new_gateway }} 255.255.255.0"
          - "no shutdown"
        save_when: modified
      when: inventory_hostname == expansion.target_dist
      register: dist_config_result
      
    - name: "{{ log_prefix }} Verify Distribution Switch Configuration"
      ios_command:
        commands:
          - "show interface {{ expansion.dist_interface }}.{{ expansion.new_vlan_id }}"
          - "show ip interface brief | include {{ expansion.dist_interface }}.{{ expansion.new_vlan_id }}"
      register: dist_verify
      when: inventory_hostname == expansion.target_dist
      
    - name: "{{ log_prefix }} Distribution Switch Configuration Result"
      debug:
        msg: |
          ✅ {{ expansion.target_dist }} Configuration Complete
          - VLAN ID: {{ expansion.new_vlan_id }}
          - Network: {{ expansion.new_network }}
          - Gateway: {{ expansion.new_gateway }}
          - Interface Status: {{ dist_verify.stdout[1] if dist_verify.stdout[1] is defined else 'Verifying...' }}
      when: inventory_hostname == expansion.target_dist

- name: "Generate Manual Setup Script for Access Switch"
  hosts: localhost
  gather_facts: true
  vars:
    expansion: "{{ hostvars['localhost']['expansion'] }}"
    log_prefix: "{{ hostvars['localhost']['log_prefix'] }}"
    
  tasks:
    - name: "Create logs directory"
      file:
        path: "./logs"
        state: directory
      delegate_to: localhost

    - name: "{{ log_prefix }} Generate Access Switch Setup Script"
      copy:
        content: |
          #!/bin/bash
          # {{ expansion.target_access }} Manual Setup Script
          # {{ expansion.customer_name }} - {{ expansion.description }}
          # Generated: {{ ansible_date_time.iso8601 }}
          
          echo "================================================"
          echo "{{ expansion.target_access }} Manual Setup Guide"
          echo "================================================"
          echo ""
          echo "⚠️  This script is for guidance only. Log in to the Access switch console and execute manually."
          echo ""
          echo "1. Log in to {{ expansion.target_access }} console"
          echo ""
          echo "2. Configure uplink port as trunk (important!):"
          echo "Switch> enable"
          echo "Switch# configure terminal"
          echo ""
          echo "# Set uplink port (to dist2-sw) as trunk"
          echo "Switch(config)# interface GigabitEthernet0/0"
          echo "Switch(config-if)# switchport trunk encapsulation dot1q"
          echo "Switch(config-if)# switchport mode trunk"
          echo "Switch(config-if)# switchport trunk allowed vlan {{ expansion.new_vlan_id }}"
          echo "Switch(config-if)# no shutdown"
          echo "Switch(config-if)# exit"
          echo ""
          echo "3. Create VLAN:"
          echo "Switch(config)# vlan {{ expansion.new_vlan_id }}"
          echo "Switch(config-vlan)# name {{ expansion.customer_id }}_{{ expansion.description | replace(' ', '_') }}"
          echo "Switch(config-vlan)# exit"
          echo ""
          echo "4. Assign customer ports to VLAN:"
          echo "Switch(config)# interface range GigabitEthernet0/1-2"
          echo "Switch(config-if-range)# switchport mode access"
          echo "Switch(config-if-range)# switchport access vlan {{ expansion.new_vlan_id }}"
          echo "Switch(config-if-range)# no shutdown"
          echo "Switch(config-if-range)# exit"
          echo ""
          echo "5. Optimize Spanning Tree (optional):"
          echo "Switch(config)# interface GigabitEthernet0/0"
          echo "Switch(config-if)# spanning-tree portfast trunk"
          echo "Switch(config-if)# exit"
          echo ""
          echo "6. Save configuration:"
          echo "Switch(config)# exit"
          echo "Switch# write memory"
          echo ""
          echo "7. Verify configuration:"
          echo "Switch# show interface trunk"
          echo "Switch# show vlan brief"
          echo "Switch# show spanning-tree vlan {{ expansion.new_vlan_id }}"
          echo ""
          echo "================================================"
          echo "Troubleshooting Guide:"
          echo "================================================"
          echo "- If ping fails: wait for Spanning Tree to converge (30s~1m)"
          echo "- Check traffic: show interface trunk"
          echo "- Check MAC learning: show mac address-table vlan {{ expansion.new_vlan_id }}"
          echo "================================================"
        dest: "./logs/{{ expansion.target_access }}_setup_vlan{{ expansion.new_vlan_id }}.sh"
        mode: '0755'
      delegate_to: localhost
      
    - name: "{{ log_prefix }} Generate VPCS Setup Script"
      copy:
        content: |
          #!/bin/bash
          # VPCS Setup Script
          # {{ expansion.customer_name }} - {{ expansion.description }}
          # Generated: {{ ansible_date_time.iso8601 }}
          
          echo "================================================"
          echo "VPCS Manual Setup Guide"
          echo "================================================"
          echo ""
          echo "Apply the following configuration to VPCS connected to {{ expansion.target_access }}:"
          echo ""
          {% if vpcs_config is defined %}
          {% for vpcs in vpcs_config %}
          echo "{{ vpcs.name }} ({{ vpcs.description }}) configuration:"
          echo "VPCS> ip {{ vpcs.ip }} {{ vpcs.gateway }}"
          echo "VPCS> save"
          echo ""
          {% endfor %}
          {% else %}
          echo "VPCS-{{ expansion.customer_id }}4 configuration:"
          echo "VPCS> ip 10.100.50.10/24 {{ expansion.new_gateway }}"
          echo "VPCS> save"
          echo ""
          echo "VPCS-{{ expansion.customer_id }}5 configuration:"
          echo "VPCS> ip 10.100.50.20/24 {{ expansion.new_gateway }}"
          echo "VPCS> save"
          echo ""
          {% endif %}
          echo "Connectivity Test:"
          echo "VPCS> ping {{ expansion.new_gateway }}"
          echo "VPCS> ping 10.100.10.10  # Test with existing Customer A network"
          echo ""
          echo "================================================"
        dest: "./logs/vpcs_setup_{{ expansion.customer_id }}_vlan{{ expansion.new_vlan_id }}.sh"
        mode: '0755'
      delegate_to: localhost

- name: "Connectivity Test and Verification"
  hosts: localhost
  gather_facts: false
  vars:
    expansion: "{{ hostvars['localhost']['expansion'] }}"
    log_prefix: "{{ hostvars['localhost']['log_prefix'] }}"
    
  tasks:
    - name: "{{ log_prefix }} Test Connectivity from Core to New Gateway"
      ios_command:
        commands:
          - "ping {{ expansion.new_gateway }}"
      register: ping_test
      delegate_to: "{{ groups['core'][0] }}"
      ignore_errors: true
      
    - name: "{{ log_prefix }} Connectivity Test Result"
      debug:
        msg: |
          🔍 Network Connectivity Test:
          {{ '✅ Core → Gateway connection successful' if ping_test is succeeded and ping_test.stdout[0] is defined and 'Success rate is 100' in ping_test.stdout[0] else '⚠️  Core → Gateway connection needs manual verification' }}

- name: "Scenario 1 Completion and Next Steps"
  hosts: localhost
  gather_facts: false
  vars:
    expansion: "{{ hostvars['localhost']['expansion'] }}"
    
  tasks:
    - name: "🎉 Scenario 1 Complete - {{ expansion.customer_name }} Expansion"
      debug:
        msg: |
          ================================================
          ✅ Scenario 1 Complete: {{ expansion.customer_name }} Network Expansion
          ================================================
          
          Automatic Configuration Complete:
          - ✅ Core Router: Added route {{ expansion.new_network }} → {{ expansion.core_next_hop }}
          - ✅ {{ expansion.target_dist }}: Created VLAN {{ expansion.new_vlan_id }} subinterface
          - ✅ Gateway {{ expansion.new_gateway }} configured
          
          📋 Manual Setup Scripts Generated:
          ================================================
          - ./logs/{{ expansion.target_access }}_setup_vlan{{ expansion.new_vlan_id }}.sh
          - ./logs/vpcs_setup_{{ expansion.customer_id }}_vlan{{ expansion.new_vlan_id }}.sh
          
          📝 Next Manual Steps:
          ================================================
          1. Log in to {{ expansion.target_access }} console and follow script
          2. Create VLAN {{ expansion.new_vlan_id }} and assign ports
          3. Configure VPCS IPs (see script)
          4. Test connectivity: ping {{ expansion.new_gateway }}
          
          ⚠️  Note: Access switch requires manual setup due to vIOS L2 limitations
          ================================================

    - name: "Save Expansion Completion Info (for logs)"
      copy:
        content: |
          # {{ expansion.customer_name }} Expansion Completion Info
          # Generated: {{ ansible_date_time.iso8601 }}
          
          Customer Info:
            ID: {{ expansion.customer_id }}
            Name: {{ expansion.customer_name }}
            
          Network Info:
            VLAN: {{ expansion.new_vlan_id }}
            Network: {{ expansion.new_network }}
            Gateway: {{ expansion.new_gateway }}
            
          Device Info:
            Distribution: {{ expansion.target_dist }} (auto-config complete)
            Access: {{ expansion.target_access }} (manual setup required)
            
          Service Info:
            Description: {{ expansion.description }}
            Status: Network layer complete, awaiting manual Access layer setup
        dest: "./logs/expansion_{{ expansion.customer_id }}_vlan{{ expansion.new_vlan_id }}_{{ ansible_date_time.epoch }}.log"
      delegate_to: localhost

# ===================================================================
# Variable Override Example (using vars file or extra-vars)
# ===================================================================
# 
# Example for Customer B Expansion:
# ansible-playbook scenario1-customer-expansion.yml -e "
# expansion={
#   customer_id: 'B',
#   customer_name: 'Customer B',
#   new_vlan_id: 205,
#   new_network: '10.200.50.0/24',
#   new_gateway: '10.200.50.1',
#   description: 'Analytics Service',
#   target_dist: 'dist1-sw',
#   target_access: 'access-sw3',
#   core_next_hop: '10.0.1.2',
#   dist_interface: 'GigabitEthernet2/0'
# }"

